swagger: "2.0"
info:
  description: The Bitter Battles API.
  version: "1.0"
  title: Bitter Battles
host: api.bitterbattles.com
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /battles:
    get:
      tags:
        - battles
      summary: List all battles
      description: Gets a list of all battles.
      parameters:
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/pageSize"
      responses:
        200:
          description: Success.
          schema:
            $ref: "#/definitions/battleList"
    post:
      tags:
        - battles
      summary: Create a battle
      description: Creates a new battle.
      parameters:
        - in: body
          name: body
          description: The battle to create.
          required: true
          schema:
            $ref: "#/definitions/newBattle"
      responses:
        201:
          description: Success.
        400:
          description: One or more of the request parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
  /logins:
    post:
      tags:
        - logins
      summary: Log in
      description: Logs a user in.
      parameters:
        - in: body
          name: body
          description: The login credentials.
          required: true
          schema:
            $ref: "#/definitions/loginCredentials"
      responses:
        201:
          description: Success.
          schema:
            $ref: "#/definitions/loginResponse"
        400:
          description: One or more of the request body parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
  /refreshes:
    post:
      tags:
        - logins
      summary: Refresh a login
      description: Refreshes a login session.
      parameters:
        - in: body
          name: body
          description: The refresh credentials.
          required: true
          schema:
            $ref: "#/definitions/refreshCredentials"
      responses:
        201:
          description: Success.
          schema:
            $ref: "#/definitions/loginResponse"
        400:
          description: One or more of the request body parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
  /users:
    post:
      tags:
        - users
      summary: Sign up
      description: Registers a new user.
      parameters:
        - in: body
          name: body
          description: The new user to register.
          required: true
          schema:
            $ref: "#/definitions/newUser"
      responses:
        201:
          description: Success.
        400:
          description: One or more of the request body parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
  /users/me:
    patch:
      tags:
        - users
      summary: "[NOT SUPPORTED YET] Update my account"
      description: Updates my account details
      parameters:
        - in: body
          name: body
          description: The updates to apply.
          required: true
          schema:
            $ref: "#/definitions/userUpdates"
      responses:
        204:
          description: Success.
        400:
          description: One or more of the request body parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
        403:
          description: You are not allowed to modify the account in this way.
          schema:
            $ref: "#/definitions/errorResponse"
    delete:
      tags:
        - users
      summary: Delete my account
      description: Deletes my account
      responses:
        204:
          description: Success.
  /users/me/battles:
    get:
      tags:
        - battles
      summary: List my battles
      description: Gets a list of battles created by me.
      parameters:
        - $ref: "#/parameters/sort"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/pageSize"
      responses:
        200:
          description: Success.
          schema:
            $ref: "#/definitions/battleList"
  /users/me/battles/{id}:
    delete:
      tags:
        - battles
      summary: Delete one of my battles
      description: Deletes one of my battles by ID.
      parameters:
        - $ref: "#/parameters/battleId"
      responses:
        204:
          description: Success.
        404:
          description: The specified battle ID could not be found or was not authored by you.
          schema:
            $ref: "#/definitions/errorResponse"
  /votes:
    post:
      tags:
        - votes
      summary: Record a vote
      description: Creates a new vote.
      parameters:
        - in: body
          name: body
          description: The new vote to record.
          required: true
          schema:
            $ref: "#/definitions/newVote"
      responses:
        201:
          description: Success.
        400:
          description: One or more of the request body parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
  /votes/me/battles:
    get:
      tags:
        - battles
      summary: List battles I've voted on
      description: Gets a list of battles that the I have voted on.
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/pageSize"
      responses:
        200:
          description: Success.
          schema:
            $ref: "#/definitions/battleList"
  /flags:
    post:
      tags:
        - flags
      summary: "[NOT SUPPORTED YET] Record a flag"
      description: Creates a new flag.
      parameters:
        - in: body
          name: body
          description: The new flag to record.
          required: true
          schema:
            $ref: "#/definitions/newFlag"
      responses:
        201:
          description: Success.
        400:
          description: One or more of the request body parameters is invalid.
          schema:
            $ref: "#/definitions/errorResponse"
  /flags/battles:
    get:
      tags:
        - battles
      summary: "[NOT SUPPORTED YET] List flagged battles"
      description: Gets a list of flagged battles.
      parameters:
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/pageSize"
      responses:
        200:
          description: Success.
          schema:
            $ref: "#/definitions/battleList"
  /flags/battles/{id}:
    delete:
      tags:
        - battles
      summary: "[NOT SUPPORTED YET] Delete a flagged battle"
      description: Deletes a flagged battle by ID.
      parameters:
        - $ref: "#/parameters/battleId"
      responses:
        204:
          description: Success.
        404:
          description: The specified battle ID could not be found or is not flagged.
          schema:
            $ref: "#/definitions/errorResponse"
parameters:
  sort:
    in: query
    name: sort
    description: How to sort the returned list.
    required: false
    type: string
    enum:
      - recent
      - popular
      - controversial
    default: recent
  page:
    in: query
    name: page
    description: The pagination page number.
    required: false
    type: integer
    default: 1
  pageSize:
    in: query
    name: pageSize
    description: The pagination page size.
    required: false
    type: integer
    default: 50
  battleId:
    in: path
    name: id
    description: The ID of the battle.
    required: true
    type: string
definitions:
  errorResponse:
    type: object
    properties:
      errorCode:
        type: integer
      errorMessage:
        type: string
  newBattle:
    type: object
    properties:
      title:
        type: string
      description:
        type: string
    required:
      - title
      - description
  battleList:
    type: array
    items:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        title:
          type: string
        description:
          type: string
        canVote:
          type: boolean
        votesFor:
          type: integer
        votesAgainst:
          type: integer
        isFlagged:
          type: boolean
        createdOn:
          type: integer
          format: Epoch time (in seconds)
  loginCredentials:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  refreshCredentials:
    type: object
    properties:
      refreshToken:
        type: string
    required:
      - refreshToken
  loginResponse:
    type: object
    properties:
      accessToken:
        type: string
      accessExpiresIn:
        type: integer
      refreshToken:
        type: string
      refreshExpiresIn:
        type: integer
  newUser:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  userUpdates:
    type: object
    properties:
      email:
        type: string
      username:
        type: string
      password:
        type: string
  newVote:
    type: object
    properties:
      battleId:
        type: string
      isVoteFor:
        type: boolean
    required:
      - battleId
      - isVoteFor
  newFlag:
    type: object
    properties:
      battleId:
        type: string
    required:
      - battleId