AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvName:
    Type: String
    Default: dev
Conditions:
  IsProd:
    !Equals [!Ref EnvName, "prod"]
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ServiceRoleForLambda
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:ListStreams
                  - dynamodb:DescribeStream
                  - dynamodb:GetShardIterator
                  - dynamodb:GetRecords
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: "*"
  BattlesGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-get
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-get.zip
      Runtime: go1.x
      Handler: battles-get
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue Subnet0Id
          - !ImportValue Subnet1Id
          - !ImportValue Subnet2Id
        SecurityGroupIds:
          - !ImportValue SecurityGroupId
      Environment:
        Variables:
          REDIS_ADDRESS: !ImportValue RedisAddress
  BattlesPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-post.zip
      Runtime: go1.x
      Handler: battles-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue Subnet0Id
          - !ImportValue Subnet1Id
          - !ImportValue Subnet2Id
        SecurityGroupIds:
          - !ImportValue SecurityGroupId
  BattlesStreamLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-stream
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-stream.zip
      Runtime: go1.x
      Handler: battles-stream
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue Subnet0Id
          - !ImportValue Subnet1Id
          - !ImportValue Subnet2Id
        SecurityGroupIds:
          - !ImportValue SecurityGroupId
      Environment:
        Variables:
          REDIS_ADDRESS: !ImportValue RedisAddress
  VotesPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: votes-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: votes-post.zip
      Runtime: go1.x
      Handler: votes-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue Subnet0Id
          - !ImportValue Subnet1Id
          - !ImportValue Subnet2Id
        SecurityGroupIds:
          - !ImportValue SecurityGroupId
  VotesStreamLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: votes-stream
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: votes-stream.zip
      Runtime: go1.x
      Handler: votes-stream
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue Subnet0Id
          - !ImportValue Subnet1Id
          - !ImportValue Subnet2Id
        SecurityGroupIds:
          - !ImportValue SecurityGroupId
  BattlesStreamTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !ImportValue BattlesTableStreamArn
      FunctionName: !GetAtt BattlesStreamLambda.Arn
      Enabled: true
      BatchSize: 100
      StartingPosition: TRIM_HORIZON
  VotesStreamTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !ImportValue VotesTableStreamArn
      FunctionName: !GetAtt VotesStreamLambda.Arn
      Enabled: true
      BatchSize: 100
      StartingPosition: TRIM_HORIZON
Outputs:
  BattlesGetLambdaArn:
    Value: !GetAtt BattlesGetLambda.Arn
    Export:
      Name: BattlesGetLambdaArn
  BattlesPostLambdaArn:
    Value: !GetAtt BattlesPostLambda.Arn
    Export:
      Name: BattlesPostLambdaArn
  VotesPostLambdaArn:
    Value: !GetAtt VotesPostLambda.Arn
    Export:
      Name: VotesPostLambdaArn