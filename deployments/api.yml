AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvName:
    Type: String
    Default: dev
  BattlesTableRCUs:
    Type: Number
    Default: 1
  BattlesTableWCUs:
    Type: Number
    Default: 1
  UsersTableRCUs:
    Type: Number
    Default: 1
  UsersTableWCUs:
    Type: Number
    Default: 1
  UsersTableUsernameRCUs:
    Type: Number
    Default: 1
  UsersTableUsernameWCUs:
    Type: Number
    Default: 1
  VotesTableRCUs:
    Type: Number
    Default: 1
  VotesTableWCUs:
    Type: Number
    Default: 1
  RedisNodeType:
    Type: String
    Default: cache.t2.micro
  AccessTokenSecret:
    Type: String
  RefreshTokenSecret:
    Type: String
Conditions:
  IsProd:
    !Equals [!Ref EnvName, "prod"]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  Subnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: false
  Subnet0RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet0
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: false
  Subnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
  Subnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2
  DynamoEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      RouteTableIds:
        - !Ref RouteTable
  BattlesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: battles
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref BattlesTableRCUs
        WriteCapacityUnits: !Ref BattlesTableWCUs
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: users
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref UsersTableRCUs
        WriteCapacityUnits: !Ref UsersTableWCUs
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: username
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref UsersTableUsernameRCUs
            WriteCapacityUnits: !Ref UsersTableUsernameWCUs
  VotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: votes
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref VotesTableRCUs
        WriteCapacityUnits: !Ref VotesTableWCUs
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: battleId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: battleId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  SubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: A group of subnets for redis.
      SubnetIds:
        - !Ref Subnet0
        - !Ref Subnet1
        - !Ref Subnet2
  Redis:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      ReplicationGroupDescription: Multi-AZ redis cluster.
      Engine: redis
      CacheNodeType: !Ref RedisNodeType
      AutomaticFailoverEnabled: !If [IsProd, true, false]
      NumCacheClusters: !If [IsProd, 3, 1]
      PreferredCacheClusterAZs:
        - !Select [0, !GetAZs ""]
        - !If [IsProd, !Select [1, !GetAZs ""], !Ref "AWS::NoValue"]
        - !If [IsProd, !Select [2, !GetAZs ""], !Ref "AWS::NoValue"]
      CacheSubnetGroupName: !Ref SubnetGroup
      SecurityGroupIds:
        - !GetAtt VPC.DefaultSecurityGroup
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ServiceRoleForLambda
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:ListStreams
                  - dynamodb:DescribeStream
                  - dynamodb:GetShardIterator
                  - dynamodb:GetRecords
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: "*"
  BattlesGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-get
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-get.zip
      Runtime: go1.x
      Handler: battles-get
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  BattlesPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-post.zip
      Runtime: go1.x
      Handler: battles-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  BattlesIdDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-id-delete
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-id-delete.zip
      Runtime: go1.x
      Handler: battles-id-delete
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  BattlesStreamLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-stream
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-stream.zip
      Runtime: go1.x
      Handler: battles-stream
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  BattlesStreamTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt BattlesTable.StreamArn
      FunctionName: !GetAtt BattlesStreamLambda.Arn
      Enabled: true
      BatchSize: 100
      StartingPosition: TRIM_HORIZON
  LoginsPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: logins-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: logins-post.zip
      Runtime: go1.x
      Handler: logins-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  RefreshesPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: refreshes-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: refreshes-post.zip
      Runtime: go1.x
      Handler: refreshes-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  UsersPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: users-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: users-post.zip
      Runtime: go1.x
      Handler: users-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  UsersMeDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: users-me-delete
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: users-me-delete.zip
      Runtime: go1.x
      Handler: users-me-delete
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  UsersMeBattlesGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: users-me-battles-get
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: users-me-battles-get.zip
      Runtime: go1.x
      Handler: users-me-battles-get
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  UsersMeBattlesIdDeleteLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: users-me-battles-id-delete
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: users-me-battles-id-delete.zip
      Runtime: go1.x
      Handler: users-me-battles-id-delete
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  VotesPostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: votes-post
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: votes-post.zip
      Runtime: go1.x
      Handler: votes-post
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  VotesMeBattlesGetLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: votes-me-battles-get
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: votes-me-battles-get.zip
      Runtime: go1.x
      Handler: votes-me-battles-get
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup  
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  VotesStreamLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: votes-stream
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: votes-stream.zip
      Runtime: go1.x
      Handler: votes-stream
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref Subnet0
          - !Ref Subnet1
          - !Ref Subnet2
        SecurityGroupIds:
          - !GetAtt VPC.DefaultSecurityGroup
      Environment:
        Variables:
          REDIS_ADDRESS: !Join ["", [!GetAtt Redis.PrimaryEndPoint.Address, ":", !GetAtt Redis.PrimaryEndPoint.Port]]
          ACCESS_TOKEN_SECRET: !Ref AccessTokenSecret
          REFRESH_TOKEN_SECRET: !Ref RefreshTokenSecret
  VotesStreamTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt VotesTable.StreamArn
      FunctionName: !GetAtt VotesStreamLambda.Arn
      Enabled: true
      BatchSize: 100
      StartingPosition: TRIM_HORIZON
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: api
      EndpointConfiguration:
        Types:
          - REGIONAL
  BattlesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: battles
  BattlesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref BattlesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt BattlesGetLambda.Arn]
        PassthroughBehavior: NEVER
  BattlesGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BattlesGetLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/GET/battles", API: !Ref API]
  BattlesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref BattlesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt BattlesPostLambda.Arn]
        PassthroughBehavior: NEVER
  BattlesPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BattlesPostLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/POST/battles", API: !Ref API]
  BattlesIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref BattlesResource
      PathPart: "{id}"
  BattlesIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref BattlesIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt BattlesIdDeleteLambda.Arn]
        PassthroughBehavior: NEVER
  BattlesIdDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BattlesIdDeleteLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/DELETE/battles/*", API: !Ref API]
  LoginsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: logins
  LoginsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref LoginsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt LoginsPostLambda.Arn]
        PassthroughBehavior: NEVER
  LoginsPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LoginsPostLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/POST/logins", API: !Ref API]
  RefreshesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: refreshes
  RefreshesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref RefreshesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt RefreshesPostLambda.Arn]
        PassthroughBehavior: NEVER
  RefreshesPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RefreshesPostLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/POST/refreshes", API: !Ref API]
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: users
  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt UsersPostLambda.Arn]
        PassthroughBehavior: NEVER
  UsersPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersPostLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/POST/users", API: !Ref API]
  UsersMeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref UsersResource
      PathPart: "me"
  UsersMeDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref UsersMeResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt UsersMeDeleteLambda.Arn]
        PassthroughBehavior: NEVER
  UsersMeDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersMeDeleteLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/DELETE/users/me", API: !Ref API]
  UsersMeBattlesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref UsersMeResource
      PathPart: "battles"
  UsersMeBattlesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref UsersMeBattlesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt UsersMeBattlesGetLambda.Arn]
        PassthroughBehavior: NEVER
  UsersMeBattlesGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersMeBattlesGetLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/GET/users/me/battles", API: !Ref API]
  UsersMeBattlesIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref UsersMeBattlesResource
      PathPart: "{id}"
  UsersMeBattlesIdDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref UsersMeBattlesIdResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt UsersMeBattlesIdDeleteLambda.Arn]
        PassthroughBehavior: NEVER
  UsersMeBattlesIdDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersMeBattlesIdDeleteLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/DELETE/users/me/battles/*", API: !Ref API]
  VotesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt API.RootResourceId
      PathPart: votes
  VotesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref VotesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt VotesPostLambda.Arn]
        PassthroughBehavior: NEVER
  VotesPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt VotesPostLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/POST/votes", API: !Ref API]
  VotesMeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref VotesResource
      PathPart: "me"
  VotesMeBattlesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !Ref VotesMeResource
      PathPart: "battles"
  VotesMeBattlesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API
      ResourceId: !Ref VotesMeBattlesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub ["arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations", LambdaArn: !GetAtt VotesMeBattlesGetLambda.Arn]
        PassthroughBehavior: NEVER
  VotesMeBattlesGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt VotesMeBattlesGetLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub ["arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*/GET/votes/me/battles", API: !Ref API]
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !If [IsProd, "api.bitterbattles.com", !Sub "api-${EnvName}.bitterbattles.com"]
      ValidationMethod: DNS
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: !If [IsProd, "api.bitterbattles.com", !Sub "api-${EnvName}.bitterbattles.com"]
      RegionalCertificateArn: !Ref Certificate
      EndpointConfiguration:
        Types:
          - REGIONAL
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: BattlesGetMethod
    Properties:
      RestApiId: !Ref API
  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref API
      DeploymentId: !Ref Deployment
      StageName: !Ref EnvName
  BasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref API
      Stage: !Ref Stage
      BasePath: "v1"