AWSTemplateFormatVersion: 2010-09-09
Parameters:
  EnvName:
    Type: String
    Default: dev
  BattlesTableRCUs:
    Type: Number
    Default: 1
  BattlesTableWCUs:
    Type: Number
    Default: 1
  BattlesTableUserIdRCUs:
    Type: Number
    Default: 1
  BattlesTableUserIdWCUs:
    Type: Number
    Default: 1
  RanksTableRCUs:
    Type: Number
    Default: 1
  RanksTableWCUs:
    Type: Number
    Default: 1
  RanksTableBattleIdRCUs:
    Type: Number
    Default: 1
  RanksTableBattleIdWCUs:
    Type: Number
    Default: 1
  VotesTableRCUs:
    Type: Number
    Default: 1
  VotesTableWCUs:
    Type: Number
    Default: 1
  BattlesStreamBatchSize:
    Type: Number
    Default: 100
  VotesStreamBatchSize:
    Type: Number
    Default: 100
Conditions:
  IsProd:
    !Equals [!Ref EnvName, "prod"]
Resources:
  BattlesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: battles
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref BattlesTableRCUs
        WriteCapacityUnits: !Ref BattlesTableWCUs
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: userId
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref BattlesTableUserIdRCUs
            WriteCapacityUnits: !Ref BattlesTableUserIdWCUs
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  RanksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ranks
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref RanksTableRCUs
        WriteCapacityUnits: !Ref RanksTableWCUs
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
        - AttributeName: score
          AttributeType: N
        - AttributeName: battleId
          AttributeType: S
      KeySchema:
        - AttributeName: type
          KeyType: HASH
        - AttributeName: score
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: battleId
          KeySchema:
            - AttributeName: battleId
              KeyType: HASH
            - AttributeName: type
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref RanksTableBattleIdRCUs
            WriteCapacityUnits: !Ref RanksTableBattleIdWCUs
  VotesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: votes
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref VotesTableRCUs
        WriteCapacityUnits: !Ref VotesTableWCUs
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: battleId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: battleId
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_IMAGE
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ServiceRoleForLambda
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:ListStreams
                  - dynamodb:DescribeStream
                  - dynamodb:GetShardIterator
                  - dynamodb:GetRecords
                Resource: "*"
  # BattlesGetLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: battles-get
  #     Code:
  #       S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
  #       S3Key: battles-get.zip
  #     Runtime: go1.x
  #     Handler: battles-get
  #     Role: !GetAtt LambdaRole.Arn
  # BattlesPostLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: battles-post
  #     Code:
  #       S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
  #       S3Key: battles-post.zip
  #     Runtime: go1.x
  #     Handler: battles-post
  #     Role: !GetAtt LambdaRole.Arn
  BattlesStreamLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: battles-stream
      Code:
        S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
        S3Key: battles-stream.zip
      Runtime: go1.x
      Handler: battles-stream
      Role: !GetAtt LambdaRole.Arn
  # VotesPostLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: votes-post
  #     Code:
  #       S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
  #       S3Key: votes-post.zip
  #     Runtime: go1.x
  #     Handler: votes-post
  #     Role: !GetAtt LambdaRole.Arn
  # VotesStreamLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: votes-stream
  #     Code:
  #       S3Bucket: !If [IsProd, "bitterbattles-api-lambda", !Sub "bitterbattles-api-${EnvName}-lambda"]
  #       S3Key: votes-stream.zip
  #     Runtime: go1.x
  #     Handler: votes-stream
  #     Role: !GetAtt LambdaRole.Arn
  BattlesStreamTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt BattlesTable.StreamArn
      FunctionName: !GetAtt BattlesStreamLambda.Arn
      Enabled: true
      BatchSize: !Ref BattlesStreamBatchSize
      StartingPosition: TRIM_HORIZON
  # VotesStreamTrigger:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties:
  #     EventSourceArn: !GetAtt VotesTable.StreamArn
  #     FunctionName: !GetAtt VotesStreamLambda.Arn
  #     Enabled: true
  #     BatchSize: !Ref VotesStreamBatchSize
  #     StartingPosition: TRIM_HORIZON
  # Certificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !If [IsProd, "api.bitterbattles.com", !Sub "api-${EnvName}.bitterbattles.com"]
  #     ValidationMethod: DNS
  # DomainName:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties: 
  #     DomainName: !GetAtt Certificate.DomainName
  #     RegionalCertificateArn: !GetAtt Certificate.Arn
  #     EndpointConfiguration:
  #       Types:
  #         - REGIONAL
  # API:
  #   Type: AWS::ApiGateway::RestApi
  #   Properties:
  #     Name: api
  #     EndpointConfiguration:
  #       Types:
  #         - Regional
  # BattlesResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref API
  #     ParentId: !GetAtt API.RootResourceId
  #     PathPart: battles
  # VotesResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     RestApiId: !Ref API
  #     ParentId: !GetAtt API.RootResourceId
  #     PathPart: votes
  # BattlesGetMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref API
  #     ResourceId: !Ref BattlesResource
  #     HttpMethod: GET
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BattlesGetLambda.Arn}/invocations"
  # BattlesPostMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref API
  #     ResourceId: !Ref BattlesResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BattlesPostLambda.Arn}/invocations"
  # VotesPostMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref API
  #     ResourceId: !Ref VotesResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       Type: AWS
  #       IntegrationHttpMethod: POST
  #       Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${VotesPostLambda.Arn}/invocations"
  # Deployment:
  #   Type: AWS::ApiGateway::Deployment
  #   Properties:
  #     RestApiId: !Ref API
  # Stage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     RestApiId: !Ref API
  #     DeploymentId: !Ref Deployment
  #     StageName: !GetAtt Deployment.StageName
  # BasePath:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     BasePath: "/"
  #     DomainName: !Ref DomainName
  #     RestApiId: !Ref API
  #     Stage: !Ref Stage